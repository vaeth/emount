#compdef emount eumount
local curcontext="$curcontext" state state_descr line
typeset -A opt_args
_arguments -C -s -S : \
'(* -)'{'--help','-h'}'[print a brief help]' \
'(* -)'{'--man','-\\?'}'[show extended help as a manpage]' \
'(* -)'{'--version','-V'}'[print version]' \
{'(--ecrypt)-e+','(-e)--ecrypt='}'[PROG. Use PROG instead of ecrypt]:ecrypt-program:_files' \
{'(--mount)-m','(-m)--mount'}'[act as emount]' \
{'(--umount --unmount)-u','(--unmount -u)--umount','(--umount -u)--unmount'}'[act as eumount]' \
'-a[pass -a to ecrypt for "create"; use alternative passphrase]' \
'*:device or directory:->emount'
local ret=$?
case $state in
(emount)
	# determine whether we are in mount or umount mode:
	local m=:
	[[ $service = emount ]] || m=false
	if $m
	then	[[ -z ${opt_args[-u]++} && -z ${opt_args[--umount]++} && -z ${opt_args[--unmount]++} ]] || \
			m=false
	else	[[ -z ${opt_args[-m]++} && -z ${opt_args[--mount]++} ]] || \
			m=:
	fi
	# Find mounted devices
	local i
	local -a d a paths
	if ! $m
	then	d=()
		while read i
		do	case $i in
			([[:space:]]#/dev/mapper/e-*)
				d+=(${${i##[[:space:]]#}%% *});;
			esac
		done <<END
$(mount 2>/dev/null)
END
	fi
	while read i
	do	case $i in
		([[:space:]]#/dev/mapper/e-*)
			a=(${=${i#*-}})
			if [[ -n $d[(r)(/dev/mapper/e-$a[1])] ]]
			then	$m || paths+=($a[2])
			else	$m && paths+=($a[1,2])
			fi;;
		esac
	done </etc/fstab
	_canonical_paths -A paths directories 'mount point' && ret=0;;
esac
return ret
